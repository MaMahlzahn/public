/**
provides predicates for dealing with the subterm position 
terms generated by read_term/{2,3}
*/
:- module(pdt_util_term_position,[
	top_position/3,
	sub_position/3,
	sub_positions/2
]).

/*
top_position(+PositionTerm, -From, -To)

retrieve the position of the outer-most 
term from a position term.
*/
top_position(From-To,From,To).
top_position(string_position(From,To),From,To).
top_position(brace_term_position(From,To,_),From,To).
top_position(list_position(From,To,_,_),From,To).	
top_position(term_position(From,To,_,_,_),From,To).	


/*
sub_position(+PositionTerm, +Arg, -SubPosition)

retrieve the position term for the Arg-th argument term 
from a position term. 

The argument Arg should be an integer. The first subterm is 
addressed with Arg=1. Argument terms should always be adressed
as if the underlying term was in a canonical representation.
I.e. lists are nested '.'/2 terms, etc.

This predicate will handle list and operator terms accordingly while 
maintaining the original positions as precisely as possible.
The only situation where this gets a little complicated are lists
as nested sublists may not have a concrete textual representation. 
In those cases this predicate aproximates the sublist position by the 
position of the included elements.
*/

sub_position(brace_term_position(_,_,T),1,T).
sub_position(list_position(_,_,[H|_],_),1,H).		
sub_position(list_position(_,_,[_|[]],_),2,none).		
sub_position(list_position(_,_,[_|[First|T]],none),2,list_position(From,To,[First|T],none)):-
	last([First|T],Last),
	top_position(First,From,_),
	top_position(Last,_,To).	
sub_position(list_position(_,_,Elms,Tail),2,list_position(From,To,[First|T],none)):-
    \+Tail=none,
    append(Elms,[Tail],[_|[First|T]]),
    last([First|T],Last),
	top_position(First,From,_),
	top_position(Last,_,To).	    
sub_position(term_position(_,_,_,_,ArgPositions),N,SubPos):-
	nth1(N,ArgPositions,SubPos).
	

	
sub_positions(brace_term_position(_,_,T),[T]).
sub_positions(term_position(_,_,_,_,ArgPositions),ArgPositions).
sub_positions(list_position(_,_,Elms,Tail),[SubHead,SubTail]):-    
	sub_position(list_position(_,_,Elms,Tail),1,SubHead),
	sub_position(list_position(_,_,Elms,Tail),2,SubTail).
	