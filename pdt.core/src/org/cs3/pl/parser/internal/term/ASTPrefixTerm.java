/*****************************************************************************
 * This file is part of the Prolog Development Tool (PDT)
 * 
 * Author: Lukas Degener (among others) 
 * E-mail: degenerl@cs.uni-bonn.de
 * WWW: http://roots.iai.uni-bonn.de/research/pdt 
 * Copyright (C): 2004-2006, CS Dept. III, University of Bonn
 * 
 * All rights reserved. This program is  made available under the terms 
 * of the Eclipse Public License v1.0 which accompanies this distribution, 
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 * 
 * In addition, you may at your option use, modify and redistribute any
 * part of this program under the terms of the GNU Lesser General Public
 * License (LGPL), version 2.1 or, at your option, any later version of the
 * same license, as long as
 * 
 * 1) The program part in question does not depend, either directly or
 *   indirectly, on parts of the Eclipse framework and
 *   
 * 2) the program part in question does not include files that contain or
 *   are derived from third-party work and are therefor covered by special
 *   license agreements.
 *   
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *   
 * ad 1: A program part is said to "depend, either directly or indirectly,
 *   on parts of the Eclipse framework", if it cannot be compiled or cannot
 *   be run without the help or presence of some part of the Eclipse
 *   framework. All java classes in packages containing the "pdt" package
 *   fragment in their name fall into this category.
 *   
 * ad 2: "Third-party code" means any code that was originaly written as
 *   part of a project other than the PDT. Files that contain or are based on
 *   such code contain a notice telling you so, and telling you the
 *   particular conditions under which they may be used, modified and/or
 *   distributed.
 ****************************************************************************/

/* Generated By:JJTree: Do not edit this line. ASTPrefixTerm.java */

package org.cs3.pl.parser.internal.term;

public class ASTPrefixTerm extends SimpleNode {
	public ASTPrefixTerm(int id) {
		super(id);
	}

	public ASTPrefixTerm(PrologTermParser p, int id) {
		super(p, id);
	}

	public SimpleNode getPrincipal() {
		return (SimpleNode) jjtGetChild(0);
	}
	public ASTPrefixOperator getOperator() {
		return (ASTPrefixOperator) getPrincipal();
	}
public String getFunctor() {
		
		return "("+getPrincipal().getSyntheticImage()+")/1";
	}
	
	public SimpleNode getOperand(){		
		return (SimpleNode) children[1];
	}
	/** Accept the visitor. * */
	public Object jjtAccept(PrologTermParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public String toString() {
		return super.toString() + " (" + getPrincipal().getImage() + ")";
	}

	protected void synthesizeImage(StringBuffer sb) {
		getPrincipal().synthesizeImage(sb);
		((SimpleNode) children[1]).synthesizeImage(sb);

	}

	public SimpleNode createShallowCopy() {
		ASTPrefixTerm copy = new ASTPrefixTerm(parser, id);
		copy.copy = true;

		return copy;
	}

	public SimpleNode toCanonicalTerm(boolean linked, boolean deep) {
	
		ASTCompoundTerm r = null;

		ASTIdentifier label = new ASTIdentifier(parser, PrologTermParserTreeConstants.JJTIDENTIFIER);
		label.copy = true;
		label.value = getOperator().getValue();
		if(linked){
			label.original=this;
		}

		r = new ASTCompoundTerm(parser,
				PrologTermParserTreeConstants.JJTCOMPOUNDTERM);
		r.copy=true;
		if(linked){
			r.original=this;
		}
		r.children = new Node[2];
		r.children[0] = label;
		r.children[1] = deep?((SimpleNode)children[1]).toCanonicalTerm(linked,deep):children[1];

		return r;
	}
	
	public int getArity() {	
		return 1;
	}
	
	
}
