/* Generated By:JJTree: Do not edit this line. ASTParanthesisTerm.java */

package org.cs3.pl.parser.internal.term;

public class ASTParanthesisTerm extends SimpleNode {
  public ASTParanthesisTerm(int id) {
    super(id);
  }

  public ASTParanthesisTerm(PrologTermParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(PrologTermParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
  public String toString() {
		return super.toString() + " (..)";
	}
  
  protected void synthesizeImage(StringBuffer sb) {
		sb.append("(");
		((SimpleNode) children[0]).synthesizeImage(sb);
		sb.append(")");

	}

	public SimpleNode createShallowCopy() {
		ASTParanthesisTerm copy = new ASTParanthesisTerm(parser,id);
		copy.copy=true;		
		return copy;
	}
	
	public SimpleNode toCanonicalTerm(boolean linked,boolean deep){
			return ((SimpleNode)children[0]).toCanonicalTerm(linked,deep);
		
	}

	public SimpleNode getPrincipal() {
		return (SimpleNode) children[0];
	}
	public int getPrecedence() {	
		return OPS.PREC_MIN;
	}
	public int getArity() {
		return getPrincipal().getArity();
	}
	
}
