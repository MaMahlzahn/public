/*****************************************************************************
 * This file is part of the Prolog Development Tool (PDT)
 * 
 * Author: Lukas Degener (among others) 
 * E-mail: degenerl@cs.uni-bonn.de
 * WWW: http://roots.iai.uni-bonn.de/research/pdt 
 * Copyright (C): 2004-2006, CS Dept. III, University of Bonn
 * 
 * All rights reserved. This program is  made available under the terms 
 * of the Eclipse Public License v1.0 which accompanies this distribution, 
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 * 
 * In addition, you may at your option use, modify and redistribute any
 * part of this program under the terms of the GNU Lesser General Public
 * License (LGPL), version 2.1 or, at your option, any later version of the
 * same license, as long as
 * 
 * 1) The program part in question does not depend, either directly or
 *   indirectly, on parts of the Eclipse framework and
 *   
 * 2) the program part in question does not include files that contain or
 *   are derived from third-party work and are therefor covered by special
 *   license agreements.
 *   
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *   
 * ad 1: A program part is said to "depend, either directly or indirectly,
 *   on parts of the Eclipse framework", if it cannot be compiled or cannot
 *   be run without the help or presence of some part of the Eclipse
 *   framework. All java classes in packages containing the "pdt" package
 *   fragment in their name fall into this category.
 *   
 * ad 2: "Third-party code" means any code that was originaly written as
 *   part of a project other than the PDT. Files that contain or are based on
 *   such code contain a notice telling you so, and telling you the
 *   particular conditions under which they may be used, modified and/or
 *   distributed.
 ****************************************************************************/

/* Generated By:JJTree: Do not edit this line. ASTInfixTerm.java */

package org.cs3.pl.parser.internal.term;

import java.util.Vector;

public class ASTInfixTerm extends SimpleNode {
	public static ASTInfixTerm cast(SimpleNode from){
		if(from instanceof ASTInfixTerm){
			return (ASTInfixTerm)from;
		}
		return null;
	}
	
	public ASTInfixTerm(int id) {
		super(id);
	}

	public String getFunctor() {
		
		return "("+getPrincipal().getSyntheticImage()+")/2";
	}
	
	public ASTInfixTerm(PrologTermParser p, int id) {
		super(p, id);
	}

	/** Accept the visitor. * */
	public Object jjtAccept(PrologTermParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public SimpleNode getPrincipal() {
		for (int i = 0; i < children.length; i++) {
			if(children[i] instanceof ASTInfixOperator){
				return (SimpleNode) children[i];
			}
		}
		return null;
	}

	public ASTInfixOperator getOperator() {
		return (ASTInfixOperator) getPrincipal();
	}
	
	public SimpleNode[] getOperands(){
		SimpleNode[] operands = new SimpleNode[children.length-1];
		System.arraycopy(children,1,operands,0,operands.length);
		return operands;
	}
	
	
	protected int getPrincipalIndex() {
		for (int i = 0; i < children.length; i++) {
			if(children[i] instanceof ASTInfixOperator){
				return i;
			}
		}
		return -1;
	}
	
	public String toString() {
		return super.toString() + " (" + getPrincipal().getImage()
				+ ")";
	}
	/**
	 * move principal to front, 
	 * inline children, if they are infix terms with the same operator
	 * 
	 * no need for recursion, since tree is build bottom-up 
	 */
	public void flatten() {
		int pi= getPrincipalIndex();		
		SimpleNode tmp = getPrincipal();
		for(int i=pi;i>0;i--){
			children[i]=children[i-1];
		}
		children[0]=tmp;
		
		Vector v = new Vector();
		
		for (int i = 0; i < children.length; i++) {
			Node n = children[i];
			if(n instanceof ASTInfixTerm){
				ASTInfixTerm term = (ASTInfixTerm) n;
				if(tmp.getImage().equals(term.getPrincipal().getImage())){
					for(int j=1;j<term.children.length;j++){
						v.add(term.children[j]);
						term.children[j].jjtSetParent(this);
					}
				}
				else{
					v.add(term);
				}
			}
			else{
				v.add(n);
			}			
		}
		if(v.size()>children.length){ //otherwise nothing is to do.
			children=(Node[]) v.toArray(new Node[v.size()]);
		}
		
	}
	protected void synthesizeImage(StringBuffer sb) {
		for (int i = 1; i < children.length; i++) {
			SimpleNode child = (SimpleNode) children[i];
			if(i>1){
				getPrincipal().synthesizeImage(sb);
			}
			child.synthesizeImage(sb);
		}

	}

	public SimpleNode createShallowCopy() {
		ASTInfixTerm copy = new ASTInfixTerm(parser,id);
		copy.copy=true;		
		return copy;
	}
	
	public SimpleNode toCanonicalTerm(boolean linked, boolean deep){
		int i=children.length-1;
		ASTCompoundTerm r=null;
		
		ASTInfixOperator comma = new ASTInfixOperator(parser,PrologTermParserTreeConstants.JJTINFIXOPERATOR);
		comma.value=",";
		comma.copy=true;
		
		ASTCharacters label = new ASTCharacters(parser,PrologTermParserTreeConstants.JJTCHARACTERS);
		label.copy=true;
		label.value=getOperator().getValue();
		if(linked){
			label.original=this;
			comma.original=this;
		}
		while(i>0){						
			ASTInfixTerm args = new ASTInfixTerm(parser,PrologTermParserTreeConstants.JJTINFIXTERM);
			args.copy=true;
			if(linked){
				args.original=this;
			}
			args.children = new Node[3];
			args.children[0]=(Node) comma.clone(linked,deep);
			if(r==null){
				args.children[1]=deep? ((SimpleNode)children[i-1]).toCanonicalTerm(linked,deep):children[i-1];
				args.children[2]=deep? ((SimpleNode)children[i]).toCanonicalTerm(linked,deep):children[i];
				i-=2;
			}
			else{
				args.children[1]=deep? ((SimpleNode)children[i]).toCanonicalTerm(linked,deep):children[i];
				args.children[2]=r;
				i-=1;
			}
			r = new ASTCompoundTerm(parser,PrologTermParserTreeConstants.JJTCOMPOUNDTERM);
			r.copy=true;
			if(linked){
				r.original=this;
			}
			r.children=new Node[2];
			r.children[0]=(Node) label.clone(linked,deep);
			r.children[1]=args;
		}
		return r;
	}
	public int getArity() {
		return 2;
	}
	
	
}
