
package org.cs3.pl.prolog;

import java.util.Hashtable;
/**
 *
 * 
 */
public interface IPrologClient {
	
    /**
     * Parses a query and returns the solution in a Hashtable. The keys in the
     * Hashtable represent the variables names (java.lang.String), the values
     * are strings representing the bound value or the unbound variable (_G121).
     * 
     * @param query The dot in the end of the Prolog query is not mandatory, but may be used.
     * @return if the solution is no the return value is null, else it returns
     *               bindings for the variables in an Hashtable. The Hashtable is
     *               empty if no variables are used in the query.
     * @see java.lang.Hashtable
     */
	public abstract Hashtable query(String text);
    /**
     * Returns the next solution for the predicate specified in query(String). 
     * The keys in the returned
     * Hashtable represent the variables names (java.lang.String), the values
     * are strings representing the bound value or the unbound variable (_G121).

     * @return if the solution is no the return value is null, else it returns
     *               bindings for the variables in an Hashtable. The Hashtable is
     *               empty if no variables are used in the query.
     * @see java.lang.Hashtable
     */
	public abstract Hashtable next();
	
	
    /**
     * is the client occupied with a query?
     * 
     * E.g., if query(String) is called for a query, that has more than one solution, 
     * this method returns true until all solutions are retrieved using next()
     *   
     * @return rue if the client is currently occupied with a query.
     */
    public abstract boolean isQueryActive();
    
    /**
     * @return true if the client is currently waiting for a result from the Prolog System.
     */
    public abstract boolean isInCall();
    
    /**
     * abort the current query, if any.     
     */
    public abstract void abort();
    
    public void addPrologListener(IPrologListener l);
    public void removePrologListener(IPrologListener l);
    
    /**
     * @return true if the output generated by this client should be ignored.
     */
    public abstract boolean isHidden();
    
    
    /**
     * Consults the file pathName.
     * The pathName will be converted to unix path separators if needed.
     * 
     * @param pathName
     */
    public abstract void consult(String pathName);
    
    
}