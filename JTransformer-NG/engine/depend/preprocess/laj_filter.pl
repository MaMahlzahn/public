:- dynamic ct_depend/3.

/**
 * filter_cts(CtNames)
 *   Arg1 is a list of CTs in the CT syntax generated by the LAJ compiler.
 *   High-level-API terms are replaced by their low-level equivalents
 *   to be used in the dependency analysis.
 */

filter_cts([]).

filter_cts([CTName|CTNames]) :- 
    filter_ct(CTName),
    filter_cts(CTNames).
    
/**
 * filter_ct(CtName)
 *
 * Preprocessing step for cts. All existing term_replacement_/2 
 * rules are applied to the terms in the second and third 
 * argument of the CT with arg1=CTName.
 *
 * The proprocessed ct will be asserted as the fact 
 * ct_depend(CTName, PREPROCESSED_COND, PREPROCESSED_ACTION)
 * into the module "condor_input".
 * If a condor_input:ct_depend/3 fact with the same first 
 * argument exists it will be overwritten.
 * 
 * The current implementation only contains term_replacement_/2 
 * rules for CTs generated by the LogicAJ compiler.

 */
filter_ct(CTName) :-    
    ct(CTName, Condition, Action),
    term_filter(Condition,NewCondition),
    term_filter(Action,NewAction),
    retractall(ct_depend(CTName,_,_)),
    assert(condor_input:ct_depend(CTName,NewCondition,NewAction)).

term_filter(_member, (_memberExp)) :-
    _member \= ','(_,_),
    _member \= ';'(_,_),
    term_replacement_(_member, _memberExp).
term_filter(','(_member,_t), ','(_memberExp,_T)) :-
    term_replacement_(_member, _memberExp),
    term_filter(_t, _T).
term_filter(';'(_member,_t), (';'(_memberExp,_T))) :-
    term_replacement_(_member, _memberExp),
    term_filter(_t, _T).

/**
 * term_replacement_(Term, Replacement)
 *
 * Arg1 is a term in the ct syntax generated by the LAJ compiler.
 * Arg2 is the replacement term for Arg1 to be used in the dependency analysis.
 *
 * term_replacement_ is used by term_filter/2.
 */

term_replacement_(
    add_to_class_fq(_class, _elem),
    true):- !.
term_replacement_(
    dependency_analysis(_command),
    _command):- !.
term_replacement_(
    java_fq(_pef),
    _pef):- !.
term_replacement_(
    add(java_fq(_pef)),
    add(_pef)):- !.
term_replacement_(
    LHS = RHS,
    equals(LHS, RHS)):- !.
term_replacement_(
    LHS \= RHS,
    not(equals(LHS, RHS))):- !.
term_replacement_(
    delete(java_fq(_pef)),
    delete(_pef)):- !.
term_replacement_(
    replace(java_fq(_pef1),java_fq(_pef2)), 
    replace(_pef1,_pef2)):- !.
term_replacement_(
    _command,
    _command):- !. 
