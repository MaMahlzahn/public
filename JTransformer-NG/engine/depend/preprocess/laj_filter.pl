
/**
 * filter_cts(CtNames)
 */

filter_cts([]).

filter_cts([CTName|CTNames]) :- 
    filter_ct(CTName),
    filter_cts(CTNames).
    
/**
 * filter_ct(CtName)
 */
filter_ct(CTName) :-    
    ct(CTName, Condition, Action),
	term_filter(Condition,NewCondition),
	term_filter(Action,NewAction),
	retractall(ct_depend(CTName,_,_)),
	assert(ct_depend(CTName,NewCondition,NewAction)).

term_filter(_member, (_memberExp)) :-
    _member \= ','(_,_),
    _member \= ';'(_,_),
    term_replacement_(_member, _memberExp).
term_filter(','(_member,_t), ','(_memberExp,_T)) :-
    term_replacement_(_member, _memberExp),
    term_filter(_t, _T).
term_filter(';'(_member,_t), (';'(_memberExp,_T))) :-
    term_replacement_(_member, _memberExp),
    term_filter(_t, _T).

/**
 * term_replacement_(Term, Replacement)
 *
 * Arg1 is a term in the ct syntax generated by the LAJ compiler.
 * Arg2 is the replacement term for Arg1 to be used in the dependency analysis.
 *
 * term_replacement_ is used by term_filter/2.
 */

term_replacement_(
	add_to_class_fq(_class, _elem),
	true):- !.
term_replacement_(
	dependency_analysis(_command),
	_command):- !.
term_replacement_(
	java_fq(_pef),
	_pef):- !.
term_replacement_(
	add(java_fq(_pef)),
	add(_pef)):- !.
term_replacement_(
	LHS = RHS,
	equals(LHS, RHS)):- !.
term_replacement_(
	LHS \= RHS,
	not(equals(LHS, RHS))):- !.
term_replacement_(
	delete(java_fq(_pef)),
	delete(_pef)):- !.
term_replacement_(
	replace(java_fq(_pef1),java_fq(_pef2)), 
	replace(_pef1,_pef2)):- !.
term_replacement_(
	_command,
	_command):- !. 
