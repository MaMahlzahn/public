package org.cs3.pl.prolog;

import java.io.IOException;
import java.util.List;

public interface PrologInterface {
    public final static String SUBJECT_CONSULTED = "consulted";

    
    /**
     * returns an instance of the "default" session. This is actually a call to
     * getSession(Class) with the default class object as an argument, and
     * therefore needs reflection and an (int)-constructor.
     * 
     * @return a new Session Object
     */
    public abstract PrologSession getSession();

    /**
     * causes complete re-initialization of the Prolog system, and invalidates
     * all current sessions.
     * 
     * @throws IOException
     */
    public abstract void stop() throws IOException;

    /**
     * causes complete re-initialization of the Prolog system, and invalidates
     * all current sessions.
     * 
     * @throws IOException
     */
    public abstract void start() throws IOException;

    public boolean isUp();

    public boolean isDown();

    public void addLifeCycleHook(LifeCycleHook h);

    public void addLifeCycleHook(LifeCycleHook hook, String id,
            String[] dependencies);

    /**
     * set a configuration option of this prolog interface.
     * 
     * @see PrologInterfaceFactory.getOptions()
     */
    public void setOption(String opt, String value);

    /**
     * get the current value of a configuration option.
     * 
     * @see PrologInterfaceFactory.getOptions()
     */
    public String getOption(String opt);

    /**
     * register a listener for events generated by the prolog system.
     * 
     * @param subject
     *                    the subject for which to listen. For a list of predefined
     *                    subjects see the <code>SUBJECT_*</code> constants defined as
     *                    part of this interface. Implementations will use these
     *                    constants whereever apropiate. The exact set of subjects for
     *                    which events are generated depends on the concrete
     *                    implementation.
     * @param l
     *                    the listener to register.
     * 
     */
    public void addPrologInterfaceListener(String subject,
            PrologInterfaceListener l);

    /**
     * unregister a listener from a specified subject.
     * 
     * @param subject
     * @param l
     */
    public void removePrologInterfaceListener(String subject,
            PrologInterfaceListener l);

    /**
     * create a consult service for an optional prefix.
     * <p>
     * 
     * 
     * @param prefix an optional prefix for the ConsultService that
     * will transparently prepended to all consulted filenames.
     * @return an instance of IConsultService or null.
     */
    public abstract ConsultService getConsultService(String prefix);

    
    public List getBootstrapLibraries();
    
    public void setBootstrapLibraries(List l);
    /**
     * 
     * @return the factory instance that created this pif, or null. 
     */
    public PrologInterfaceFactory getFactory();
}