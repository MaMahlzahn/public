/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.cs3.pl.cterm.internal.parser;


public
class ASTNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected CanonicalTermParser parser;
	private Token firstToken;
	private Token lastToken;
	private String functor;
	private String image;

  public ASTNode(int i) {
    id = i;
  }

  public ASTNode(CanonicalTermParser p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /** Accept the visitor. **/
  public Object jjtAccept(CanonicalTermParserVisitor visitor, Object data)
{
    return visitor.visit(this, data);
  }

  /** Accept the visitor. **/
  public Object childrenAccept(CanonicalTermParserVisitor visitor, Object data)
{
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }

  
	void setFirstToken(Token t) {
		firstToken = t;
	}

	public Token getFirstToken() {
		return firstToken;
	}
	
	void setLastToken(Token t) {
		lastToken = t;
	}


	/*
	 * image caching code was added by hand to the code generated by jjtree. 
	 * 
	 * TODO: include in canonical_term.jjt
	 */

	public String getImage(){
		if(image != null){
			return image;
		}		
		StringBuffer sb = new StringBuffer();
		for(Token t = getFirstToken();canGetAnotherToken(t);t=t.next){
			sb.append(t.image);
		}
		image = sb.toString();
		return image;
	}




	private boolean canGetAnotherToken(Token t) {
		if (t==null) 
			return false;
		if (t==lastToken.next)
			return false;
		return true;
	}
	/*
	 * This method was added by hand to code generated by jjtree. 
	 * 
	 * TODO: include in canonical_term.jjt
	 */
	public String getFunctorImage() {
		if(functor != null){
			return functor;
		}
		StringBuffer sb = new StringBuffer();
		Token t = getFirstToken();
		do{
			sb.append(t.image);
			t=t.next;
		} while(canGetAnotherToken(t)&&
			 !t.image.equals("("));
		functor = sb.toString();
		return functor;
	}
}
/* JavaCC - OriginalChecksum=fb58e70144558081e6d8703d3f1ff05b (do not edit this line) */
