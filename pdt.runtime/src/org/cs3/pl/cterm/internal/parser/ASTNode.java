/*****************************************************************************
 * This file is part of the Prolog Development Tool (PDT)
 * 
 * Author: Lukas Degener (among others) 
 * E-mail: degenerl@cs.uni-bonn.de
 * WWW: http://roots.iai.uni-bonn.de/research/pdt 
 * Copyright (C): 2004-2006, CS Dept. III, University of Bonn
 * 
 * All rights reserved. This program is  made available under the terms 
 * of the Eclipse Public License v1.0 which accompanies this distribution, 
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 * 
 * In addition, you may at your option use, modify and redistribute any
 * part of this program under the terms of the GNU Lesser General Public
 * License (LGPL), version 2.1 or, at your option, any later version of the
 * same license, as long as
 * 
 * 1) The program part in question does not depend, either directly or
 *   indirectly, on parts of the Eclipse framework and
 *   
 * 2) the program part in question does not include files that contain or
 *   are derived from third-party work and are therefor covered by special
 *   license agreements.
 *   
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *   
 * ad 1: A program part is said to "depend, either directly or indirectly,
 *   on parts of the Eclipse framework", if it cannot be compiled or cannot
 *   be run without the help or presence of some part of the Eclipse
 *   framework. All java classes in packages containing the "pdt" package
 *   fragment in their name fall into this category.
 *   
 * ad 2: "Third-party code" means any code that was originaly written as
 *   part of a project other than the PDT. Files that contain or are based on
 *   such code contain a notice telling you so, and telling you the
 *   particular conditions under which they may be used, modified and/or
 *   distributed.
 ****************************************************************************/

/* Generated By:JJTree: Do not edit this line. Node.java */

package org.cs3.pl.cterm.internal.parser;

/* All AST nodes must implement this interface.  It provides basic
   machinery for constructing the child relationships
   between nodes. */

public class ASTNode {
	private ASTNode[] children;
	private int id;
	private Token firstToken;
	private Token lastToken;
	private String functor;
	private String image;
	
	public ASTNode(CanonicalTermParser p, int i) {
		id = i;
	}

	 /** This method tells the node to add its argument to the node's
    list of children.  */
	public void jjtAddChild(ASTNode n, int i) {
		if (children == null) {
			children = new ASTNode[i + 1];
		} else if (i >= children.length) {
			ASTNode c[] = new ASTNode[i + 1];
			System.arraycopy(children, 0, c, 0, children.length);
			children = c;
		}
		children[i] = n;
	}

	/** This method returns a child node.  The children are numbered
    from zero, left to right. */
	public ASTNode jjtGetChild(int i) {
		return children[i];
	}

	public int jjtGetNumChildren() {
		return (children == null) ? 0 : children.length;
	}

	/** Return the number of children the node has. */
	public String toString() {
		return CanonicalTermParserTreeConstants.jjtNodeName[id];
	}

	public String toString(String prefix) {
		return prefix + toString();
	}

	void setFirstToken(Token t) {
		firstToken = t;
	}

	public Token getFirstToken() {
		return firstToken;
	}
	
	void setLastToken(Token t) {
		lastToken = t;
	}

	/*
	 * image caching code was added by hand to the code generated by jjtree. 
	 * 
	 * TODO: include in canonical_term.jjt
	 */

	public String getImage(){
		if(image != null){
			return image;
		}		
		StringBuffer sb = new StringBuffer();
		for(Token t = getFirstToken();canGetAnotherToken(t);t=t.getNext()){
			sb.append(t.image);
		}
		image = sb.toString();
		return image;
	}

	private boolean canGetAnotherToken(Token t) {
		if (t==null) 
			return false;
		if (t==lastToken.getNext())
			return false;
		return true;
	}
		
	/*
	 * This method was added by hand to code generated by jjtree. 
	 * 
	 * TODO: include in canonical_term.jjt
	 */
	public String getFunctorImage() {
		if(functor != null){
			return functor;
		}
		StringBuffer sb = new StringBuffer();
		Token t = getFirstToken();
		do{
			sb.append(t.image);
			t=t.getNext();
		} while(canGetAnotherToken(t)&&
			 !t.image.equals("("));
		functor = sb.toString();
		return functor;
	}
}
