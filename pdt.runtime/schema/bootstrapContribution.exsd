<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.cs3.pdt.runtime">
<annotation>
      <appInfo>
         <meta.schema plugin="org.cs3.pdt.runtime" id="bootstrapContribution" name="Bootstrap Contribution"/>
      </appInfo>
      <documentation>
         [Enter description of this extension point.]
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appInfo>
            <meta.element deprecated="true"/>
         </appInfo>
         <documentation>
            Deprecated since 0.2M4. 
Reason: 
The connection between a particular pif and a particular set of tasks that is performed on this pif should after all be configurable by the user wherever possible. library contributions are logically connected to such a set of tasks. So they should be registered dynamically using java api and not to a static pif key using the xml file.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="contribution" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="contribution">
      <annotation>
         <appInfo>
            <meta.element deprecated="true"/>
         </appInfo>
         <documentation>
            Contributes an entry (i.e. an absolute filename) to the list of files that will be consulted into any PrologInterface created by the PDT.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="class" type="string">
            <annotation>
               <documentation>
                  If this attribute is present, its value is interpreted as a fully qualified name of a class implementing the org.cs3.pdt.BootstrapContribution interface. An additional &lt;code&gt;path&lt;/code&gt; attribute will be ignored.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.cs3.pdt.runtime.BootstrapContribution"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="path" type="string">
            <annotation>
               <documentation>
                  A path to a prolog source file that should be consulted during every startup of a PrologInterface created by the PDT.
               </documentation>
               <appInfo>
                  <meta.attribute kind="resource"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="key" type="string">
            <annotation>
               <documentation>
                  An optional key identifying the PrologInterface. 
&lt;p&gt;This contribution is applied to every PIF instance created using the &lt;code&gt;org.cs3.pdt.PDTPlugin.getPrologInterface(String key)&lt;/code&gt; method with a matching &lt;code&gt;key&lt;/code&gt; argument. If this attribute is ommited, the contribution applies to every PIF created by the PDT.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         
      </documentation>
   </annotation>

</schema>
