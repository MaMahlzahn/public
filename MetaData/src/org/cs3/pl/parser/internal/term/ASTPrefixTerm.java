/* Generated By:JJTree: Do not edit this line. ASTPrefixTerm.java */

package org.cs3.pl.parser.internal.term;

public class ASTPrefixTerm extends SimpleNode {
	public ASTPrefixTerm(int id) {
		super(id);
	}

	public ASTPrefixTerm(PrologTermParser p, int id) {
		super(p, id);
	}

	public SimpleNode getPrincipal() {
		return (SimpleNode) jjtGetChild(0);
	}
	public ASTPrefixOperator getOperator() {
		return (ASTPrefixOperator) getPrincipal();
	}
	
	public SimpleNode getOperand(){		
		return (SimpleNode) children[1];
	}
	/** Accept the visitor. * */
	public Object jjtAccept(PrologTermParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public String toString() {
		return super.toString() + " (" + getPrincipal().getImage() + ")";
	}

	protected void synthesizeImage(StringBuffer sb) {
		getPrincipal().synthesizeImage(sb);
		((SimpleNode) children[1]).synthesizeImage(sb);

	}

	public SimpleNode createShallowCopy() {
		ASTPrefixTerm copy = new ASTPrefixTerm(parser, id);
		copy.copy = true;

		return copy;
	}

	public SimpleNode toCanonicalTerm(boolean linked, boolean deep) {
	
		ASTCompoundTerm r = null;

		ASTIdentifier label = new ASTIdentifier(parser, PrologTermParserTreeConstants.JJTIDENTIFIER);
		label.copy = true;
		label.value = getOperator().getValue();
		if(linked){
			label.original=this;
		}

		r = new ASTCompoundTerm(parser,
				PrologTermParserTreeConstants.JJTCOMPOUNDTERM);
		r.copy=true;
		if(linked){
			r.original=this;
		}
		r.children = new Node[2];
		r.children[0] = label;
		r.children[1] = deep?((SimpleNode)children[1]).toCanonicalTerm(linked,deep):children[1];

		return r;
	}
	
	public int getArity() {	
		return 1;
	}
	
	public String getLabel() {
	
		return getOperator().getLabel();
	}
}
