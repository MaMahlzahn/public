/* Generated By:JJTree: Do not edit this line. ASTCompoundTerm.java */

package org.cs3.pl.parser.internal.term;

import java.util.Stack;
import java.util.Vector;

public class ASTCompoundTerm extends SimpleNode {
	public static ASTCompoundTerm cast(SimpleNode from){
		if(from instanceof ASTCompoundTerm){
			return (ASTCompoundTerm)from;
		}
		return null;
	}
	
	public ASTCompoundTerm(int id) {
		super(id);
	}

	public ASTCompoundTerm(PrologTermParser p, int id) {
		super(p, id);
	}

	/** Accept the visitor. * */
	public Object jjtAccept(PrologTermParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public String toString() {
		return super.toString() + " ("
				+ ((SimpleNode) jjtGetChild(0)).getImage() + ")";
	}

	public SimpleNode getPrincipal() {

		return (SimpleNode) jjtGetChild(0);
	}

	
	public String getLabel(){
		return getPrincipal().getValue();
	}
	public int getArity(){
		return getArguments().length;
	}
	public SimpleNode[] getArguments() {
		if (children[1] instanceof ASTInfixTerm) {
			ASTInfixTerm term = (ASTInfixTerm) children[1];
			if (",".equals(term.getPrincipal().getValue())) {
				SimpleNode[] args = new SimpleNode[term.children.length - 1];
				System.arraycopy(term.children, 1, args, 0, args.length);
				return args;
			}
		}
		return new SimpleNode[] { (SimpleNode) children[1] };
	}

	
	protected void synthesizeImage(StringBuffer sb) {
		getPrincipal().synthesizeImage(sb);
		sb.append("(");
		SimpleNode[] args = getArguments();
		for (int i = 0; i < args.length; i++) {
			SimpleNode node = args[i];
			if(i>0){
				sb.append(", ");
			}
			if(node==null){
				sb.append("!!NULL!!");
			}
			else{
				node.synthesizeImage(sb);
			}
		}
		sb.append(")");
	}

	

	public SimpleNode createShallowCopy() {
		ASTCompoundTerm copy = new ASTCompoundTerm(parser,id);
		copy.copy=true;
		
		return copy;
	}
	public SimpleNode toCanonicalTerm(boolean linked, boolean deep) {
		ASTCompoundTerm copy = (ASTCompoundTerm) clone(linked,false);
		copy.children[0]=getPrincipal().toCanonicalTerm(linked,deep);
		SimpleNode argTerm = ((SimpleNode)children[1]);
		if(argTerm instanceof ASTInfixTerm && argTerm.getPrincipal().getSyntheticImage().equals(",")){
			ASTInfixTerm  argTermClone=(ASTInfixTerm) argTerm.clone(linked,false);
			argTermClone.children=new Node[argTerm.children.length];
			for(int i=0;i<argTermClone.children.length;i++){
				argTermClone.children[i]=((SimpleNode)argTerm.children[i]).toCanonicalTerm(linked,deep);				
			}
			copy.children[1]=argTermClone;
		}else{
			copy.children[1]=((SimpleNode)children[1]).toCanonicalTerm(linked,deep);
		}
		return copy;
	}

}
