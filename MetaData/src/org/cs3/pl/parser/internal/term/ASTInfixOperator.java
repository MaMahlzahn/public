/* Generated By:JJTree: Do not edit this line. ASTInfixOperator.java */

package org.cs3.pl.parser.internal.term;

import org.apache.commons.lang.StringEscapeUtils;

public class ASTInfixOperator extends SimpleNode {
	protected String value;
	private String label;

	public ASTInfixOperator(int id) {
		super(id);
	}

	public ASTInfixOperator(PrologTermParser p, int id) {
		super(p, id);
	}

	public int getPrecedence() {
		return parser.ops.lookupInfixPrec(getFirstToken().image);
	}

	/** Accept the visitor. * */
	public Object jjtAccept(PrologTermParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public String toString() {
		return super.toString() + " (" + getImage() + ")";
	}

	protected void synthesizeImage(StringBuffer sb) {
		sb.append(getValue());

	}

	public String getValue() {
		if (value == null) {
			value = getImage();
		}
		return value;
	}

	public SimpleNode createShallowCopy() {
		ASTInfixOperator copy = new ASTInfixOperator(parser, id);
		copy.copy = true;
		copy.value = getValue();
		return copy;
	}

	public SimpleNode toCanonicalTerm(boolean linked, boolean deep) {
		ASTInfixOperator copy = new ASTInfixOperator(parser, id);
		copy.copy = true;
		copy.value = getValue();
		return copy;
	}

	public int getArity() {
		return 0;

	}

	
}
