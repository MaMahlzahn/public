/* Generated By:JJTree: Do not edit this line. ASTCall.java */

package org.cs3.pl.parser.internal.classic;

public class ASTCall extends SimpleNode  {
	private boolean init;
	private Token endToken;
	private ASTBody body;

	public ASTCall(int id) {
		super(id);
	}
	
	public ASTCall(PrologParser p, int id) {
		super(p, id);
	}
	
	
	/** Accept the visitor. **/
	public Object jjtAccept(PrologParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	
	/**
	 * @return
	 */
	public boolean isModuleDeclaration() {
		Node firstChild = getBody().jjtGetChild(0);
		if(firstChild instanceof ASTCompound)
			return ((ASTCompound)firstChild).getName().equals("module");
		return false;
	}

	/**
	 * @return
	 */
	public String getModuleName() {
		if(isModuleDeclaration()){
			ASTCompound c = (ASTCompound) getBody().jjtGetChild(0);
			SimpleNode name = (SimpleNode) c.getArgs().jjtGetChild(0);
			return name.getImage();
		}
		
		return null;
	}

	/**
	 * @return
	 */
	public ASTList getPublicModuleInterface() {
		return (ASTList)children[0].jjtGetChild(1).jjtGetChild(1);
	}	
	/**
	 * @param b
	 */
	public void setInitialization(boolean b) {
		init = b;
		
	}
	/**
	 * @return Returns the init.
	 */
	public boolean isInitialisation() {
		return init;
	}

	public void setBody(ASTBody body) {
		this.body = body;
		
	}

	public ASTBody getBody() {
		return body;
	}
	
	
}
