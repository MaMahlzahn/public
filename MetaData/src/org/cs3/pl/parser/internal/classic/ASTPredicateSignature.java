/* Generated By:JJTree: Do not edit this line. ASTPredicateSignature.java */

package org.cs3.pl.parser.internal.classic;

public class ASTPredicateSignature extends SimpleNode {

	private int arity;
  public ASTPredicateSignature(int id) {
    super(id);
  }

  public ASTPredicateSignature(PrologParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(PrologParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
  
  public void setArity(String arity){
  	this.arity = Integer.parseInt(arity); 
  }

  public int getArity(){
  	return this.arity; 
  }

  /**
   * @return
   */
  public String getName() {
  	if(children[0] instanceof ASTFunctor)
  		return ((ASTFunctor)children[0]).getName();
  	if(children[0] instanceof ASTBinaryOp)
  		return ((ASTBinaryOp)children[0]).getStartToken().image.toString();
  	throw new RuntimeException("ASTPredicateSignature.getName(): This point should never been reached.");
  }
  /**
   * @return
   */
  public String getModule() {
  	if(children[0] instanceof ASTFunctor)
  		return ((ASTFunctor)children[0]).getModuleName();
  	if(children[0] instanceof ASTBinaryOp)
  		return "system";
  	throw new RuntimeException("ASTPredicateSignature.getName(): This point should never been reached.");
  }

}