/* Generated By:JJTree&JavaCC: Do not edit this line. PrologParser.java */
package org.cs3.pl.parser;
import java.util.ArrayList;
import java.util.List;

public class PrologParser/*@bgen(jjtree)*/implements PrologParserTreeConstants, PrologParserConstants {/*@bgen(jjtree)*/
  protected JJTPrologParserState jjtree = new JJTPrologParserState();void jjtreeOpenNodeScope(Node n)
    {
      ((SimpleNode)n).setFirstToken(getToken(1));
    }

    void jjtreeCloseNodeScope(Node n)
    {
      ((SimpleNode)n).setLastToken(getToken(0));
    }

    public ASTCompilationUnit getASTRoot(){
                return (ASTCompilationUnit) jjtree.rootNode();
        }

        private List errors = new ArrayList();

        public List getErrors() {
                return errors;
        }

        public void error_skipto(int kind) {
          ParseException e = generateParseException();  // generate the exception object.
          errors.add(e);
//	  System.out.println(e.toString());  // print the error message
          Token t;
          do {
            t = getNextToken();
          } while (t.kind != kind && t.kind != EOF);
//	  if(t.kind != EOF)
        //  	getNextToken();
            // The above loop consumes tokens all the way up to a token of
            // "kind".  We use a do-while loop rather than a while because the
            // current token is the one immediately before the erroneous token
            // (in our case the token immediately before what should have been
            // "if"/"while".
        }

    public static void main (String [] args) {
        PrologParser parser;
        String filename = null;
        long initTime = 0;
        long parseTime = 0;
        long startTime = 0;
        long stopTime = 0;
        if (args.length == 0)
        {
            System.out.println("Prolog Parser Version 0.1:  Reading from standard input . . .");
            parser = new PrologParser(System.in);
        } else if (args.length == 1)
        {
            filename = args[0];
            System.out.println("Prolog Parser Version 0.1:  Reading from file " + filename + " . . .");
            try
            {
                startTime = System.currentTimeMillis();
                parser = new PrologParser(new java.io.FileInputStream(filename));
                stopTime = System.currentTimeMillis();
                initTime = stopTime - startTime;
            } catch (java.io.FileNotFoundException e)
            {
                System.out.println("Prolog Parser Version 0.1:  File " + filename + " not found.");
                return;
            }
        } else
        {
            System.out.println("Prolog Parser Version 0.1:  Usage is one of:");
            System.out.println("         java PrologParser < inputfile");
            System.out.println("OR");
            System.out.println("         java PrologParser inputfile");
            return;
        }
        try
        {
            startTime = System.currentTimeMillis();
            parser.CompilationUnit();
            stopTime = System.currentTimeMillis();
            parseTime = stopTime - startTime;
            System.out.println("Prolog Parser Version 0.1: ");
            System.out.println("   Prolog program parsed " + filename + " successfully in " + (initTime + parseTime) + " ms.");
            System.out.println("      parser initialization time was " + initTime + " ms.");
            System.out.println("      parser parse time was " + parseTime + " ms.");
        } catch (ParseException e)
        {
            System.out.println(e.getMessage());
            System.out.println("Prolog Parser Version 0.1:  Encountered errors during parse.");
        }
    }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public void CompilationUnit() throws ParseException {
 /*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(this, JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      try {
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DYNAMIC:
          case MULTIFILE:
          case MODULE_TRANSPARENT:
          case VOLATILE:
          case QUERY:
          case CLAUSEDEF:
          case CHARACTER_ATOM:
          case IDENTIFIER:
          case LPAREN:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          Member();
        }
        jj_consume_token(0);
      } catch (ParseException e) {
            error_skipto(DOT);
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void Member() throws ParseException {
    try {
      if (jj_2_1(2)) {
        NamedCall();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUERY:
        case CLAUSEDEF:
          Call();
          break;
        case DYNAMIC:
        case MULTIFILE:
        case MODULE_TRANSPARENT:
        case VOLATILE:
        case CHARACTER_ATOM:
        case IDENTIFIER:
        case LPAREN:
          Clause();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
            error_skipto(DOT);
    }
  }

  final public void Functor() throws ParseException {
 /*@bgen(jjtree) Functor */
     ASTFunctor jjtn000 = new ASTFunctor(this, JJTFUNCTOR);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      if (jj_2_2(2)) {
        token = jj_consume_token(IDENTIFIER);
       jjtn000.setModuleName(token.image.toString());
        jj_consume_token(COLON);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        token = jj_consume_token(IDENTIFIER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case DYNAMIC:
        token = jj_consume_token(DYNAMIC);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case MULTIFILE:
        token = jj_consume_token(MULTIFILE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case MODULE_TRANSPARENT:
        token = jj_consume_token(MODULE_TRANSPARENT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case VOLATILE:
        token = jj_consume_token(VOLATILE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case POINTER:
        token = jj_consume_token(POINTER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case AT:
        token = jj_consume_token(AT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case CHARACTER_ATOM:
        token = jj_consume_token(CHARACTER_ATOM);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

/* ************* ********** ************* */
/* *************  to delete ************* */
/* ************* ********** ************* */
  final public void FunctorVariableModule() throws ParseException {
 /*@bgen(jjtree) FunctorVariableModule */
     ASTFunctorVariableModule jjtn000 = new ASTFunctorVariableModule(this, JJTFUNCTORVARIABLEMODULE);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      if (jj_2_3(3)) {
        Variable();
        jj_consume_token(COLON);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        token = jj_consume_token(IDENTIFIER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case DYNAMIC:
        token = jj_consume_token(DYNAMIC);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case MULTIFILE:
        token = jj_consume_token(MULTIFILE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case MODULE_TRANSPARENT:
        token = jj_consume_token(MODULE_TRANSPARENT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case VOLATILE:
        token = jj_consume_token(VOLATILE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case IS:
        token = jj_consume_token(IS);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case MOD:
        token = jj_consume_token(MOD);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case CHARACTER_ATOM:
        token = jj_consume_token(CHARACTER_ATOM);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void Variable() throws ParseException {
 /*@bgen(jjtree) Variable */
    ASTVariable jjtn000 = new ASTVariable(this, JJTVARIABLE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(VARIABLE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
       jjtn000.setName(token.image.toString());
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
    ASTIdentifier jjtn000 = new ASTIdentifier(this, JJTIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        //    token=<POINTER> 
        //    {jjtThis.setName(token.image.toString()); }
        //    token=<AT> 
        //    {jjtThis.setName(token.image.toString()); }
            token = jj_consume_token(IDENTIFIER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case DYNAMIC:
        token = jj_consume_token(DYNAMIC);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case MULTIFILE:
        token = jj_consume_token(MULTIFILE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case MODULE_TRANSPARENT:
        token = jj_consume_token(MODULE_TRANSPARENT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case VOLATILE:
        token = jj_consume_token(VOLATILE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      case CHARACTER_ATOM:
        token = jj_consume_token(CHARACTER_ATOM);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setName(token.image.toString());
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void NamedCall() throws ParseException {
 /*@bgen(jjtree) NamedCall */
 ASTNamedCall jjtn000 = new ASTNamedCall(this, JJTNAMEDCALL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUERY:
        token = jj_consume_token(QUERY);
        break;
      case CLAUSEDEF:
        token = jj_consume_token(CLAUSEDEF);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DYNAMIC:
        token = jj_consume_token(DYNAMIC);
        break;
      case MULTIFILE:
        token = jj_consume_token(MULTIFILE);
        break;
      case MODULE_TRANSPARENT:
        token = jj_consume_token(MODULE_TRANSPARENT);
        break;
      case VOLATILE:
        token = jj_consume_token(VOLATILE);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                  jjtn000.setKind(token.kind);
      PredicateSignature();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        PredicateSignature();
      }
      token = jj_consume_token(DOT);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void Call() throws ParseException {
 /*@bgen(jjtree) Call */
 ASTCall jjtn000 = new ASTCall(this, JJTCALL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUERY:
        token = jj_consume_token(QUERY);
        break;
      case CLAUSEDEF:
        token = jj_consume_token(CLAUSEDEF);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INIT:
        jj_consume_token(INIT);
                                              jjtn000.setInitialization(true);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      Body();
      token = jj_consume_token(DOT);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void PredicateSignature() throws ParseException {
 /*@bgen(jjtree) PredicateSignature */
 ASTPredicateSignature jjtn000 = new ASTPredicateSignature(this, JJTPREDICATESIGNATURE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DYNAMIC:
        case MULTIFILE:
        case MODULE_TRANSPARENT:
        case VOLATILE:
        case POINTER:
        case AT:
        case CHARACTER_ATOM:
        case IDENTIFIER:
          Functor();
          break;
        case ASSIGN:
        case METAASSIGN:
        case GT:
        case LT:
        case ARROW:
        case IF:
        case SOFTCUT:
        case COLON:
        case EQ:
        case EQ2:
        case EQ3:
        case EQ4:
        case NEQ:
        case NEQ2:
        case IS:
        case LE:
        case LE2:
        case GE:
        case GE2:
        case NE:
        case PLUS:
        case MINUS:
        case STAR:
        case MOD:
        case LSHIFT:
        case RSIGNEDSHIFT:
        case SLASH:
        case DIVISION:
        case BITAND:
        case BITOR:
        case BITNOT:
        case BITXOR:
          BinaryOp();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPAREN);
        break;
      case DYNAMIC:
      case MULTIFILE:
      case MODULE_TRANSPARENT:
      case VOLATILE:
      case POINTER:
      case AT:
      case CHARACTER_ATOM:
      case IDENTIFIER:
        Functor();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SLASH);
      token = jj_consume_token(DECIMAL_LITERAL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
     jjtn000.setArity(token.image.toString());
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void Clause() throws ParseException {
 /*@bgen(jjtree) Clause */
 ASTClause jjtn000 = new ASTClause(this, JJTCLAUSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      if (jj_2_4(2)) {
        token = jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
                                                   jjtn000.setModule(token.image.toString());
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        Head();
                   jjtn000.setHead( (ASTHead) jjtree.peekNode() );
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARROW:
        case CLAUSEDEF:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ARROW:
            jj_consume_token(ARROW);
            break;
          case CLAUSEDEF:
            jj_consume_token(CLAUSEDEF);
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          Body();
                jjtn000.setBody( (ASTBody) jjtree.peekNode() );
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        break;
      case DYNAMIC:
      case MULTIFILE:
      case MODULE_TRANSPARENT:
      case VOLATILE:
      case CHARACTER_ATOM:
      case IDENTIFIER:
        Head();
                  jjtn000.setHead( (ASTHead) jjtree.peekNode() );
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARROW:
        case CLAUSEDEF:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ARROW:
            jj_consume_token(ARROW);
            break;
          case CLAUSEDEF:
            jj_consume_token(CLAUSEDEF);
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          Body();
                jjtn000.setBody( (ASTBody) jjtree.peekNode() );
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      token = jj_consume_token(DOT);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void Head() throws ParseException {
 /*@bgen(jjtree) Head */
  ASTHead jjtn000 = new ASTHead(this, JJTHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      Identifier();
                      jjtn000.setName(((ASTIdentifier)jjtree.peekNode()).getName());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        PredicateArgs();
                           jjtn000.setArguments( (ASTPredicateArgs) jjtree.peekNode() );
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void PredicateArgs() throws ParseException {
 /*@bgen(jjtree) PredicateArgs */
  ASTPredicateArgs jjtn000 = new ASTPredicateArgs(this, JJTPREDICATEARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      BodyElement();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        BodyElement();
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void Term() throws ParseException {
    if (jj_2_5(4)) {
      Compound();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CUT:
        Cut();
        break;
      case LPAREN:
        Parenthesis();
        break;
      case DYNAMIC:
      case MULTIFILE:
      case MODULE_TRANSPARENT:
      case VOLATILE:
      case CHARACTER_ATOM:
      case IDENTIFIER:
        Identifier();
        break;
      case MINUS:
      case DECIMAL_LITERAL:
      case BIN_LITERAL:
      case OCT_LITERAL:
      case HEX_LITERAL:
        IntAtom();
        break;
      case FLOATING_POINT_LITERAL:
        FloatAtom();
        break;
      case STRING_LITERAL:
        StringAtom();
        break;
      case ASSIGN:
      case METAASSIGN:
      case GT:
      case LT:
      case ARROW:
      case IF:
      case SOFTCUT:
      case COLON:
      case EQ:
      case EQ2:
      case EQ3:
      case EQ4:
      case NEQ:
      case NEQ2:
      case IS:
      case LE:
      case LE2:
      case GE:
      case GE2:
      case NE:
      case PLUS:
      case STAR:
      case MOD:
      case LSHIFT:
      case RSIGNEDSHIFT:
      case SLASH:
      case DIVISION:
      case BITAND:
      case BITOR:
      case BITNOT:
      case BITXOR:
        BinaryOp();
        break;
      case CLAUSEDEF:
      case DOLLAR:
      case ZERO_APO_REST:
        RestTokens();
        break;
      case VARIABLE:
        Variable();
        break;
      case LBRACKET:
        List();
        break;
      case LBRACE:
        Braces();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void TermWithoutOp() throws ParseException {
    if (jj_2_6(4)) {
      Compound();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CUT:
        Cut();
        break;
      case LPAREN:
        Parenthesis();
        break;
      case DYNAMIC:
      case MULTIFILE:
      case MODULE_TRANSPARENT:
      case VOLATILE:
      case CHARACTER_ATOM:
      case IDENTIFIER:
        Identifier();
        break;
      case MINUS:
      case DECIMAL_LITERAL:
      case BIN_LITERAL:
      case OCT_LITERAL:
      case HEX_LITERAL:
        IntAtom();
        break;
      case FLOATING_POINT_LITERAL:
        FloatAtom();
        break;
      case STRING_LITERAL:
        StringAtom();
        break;
      case CLAUSEDEF:
      case DOLLAR:
      case ZERO_APO_REST:
        RestTokens();
        break;
      case VARIABLE:
        Variable();
        break;
      case LBRACKET:
        List();
        break;
      case LBRACE:
        Braces();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Compound() throws ParseException {
 /*@bgen(jjtree) Compound */
  ASTCompound jjtn000 = new ASTCompound(this, JJTCOMPOUND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DYNAMIC:
      case MULTIFILE:
      case MODULE_TRANSPARENT:
      case VOLATILE:
      case ASSIGN:
      case METAASSIGN:
      case GT:
      case LT:
      case ARROW:
      case IF:
      case SOFTCUT:
      case CLAUSEDEF:
      case COLON:
      case EQ:
      case EQ2:
      case EQ3:
      case EQ4:
      case NEQ:
      case NEQ2:
      case IS:
      case LE:
      case LE2:
      case GE:
      case GE2:
      case NE:
      case PLUS:
      case MINUS:
      case STAR:
      case MOD:
      case LSHIFT:
      case RSIGNEDSHIFT:
      case DOLLAR:
      case SLASH:
      case POINTER:
      case AT:
      case DIVISION:
      case BITAND:
      case BITOR:
      case BITNOT:
      case BITXOR:
      case DECIMAL_LITERAL:
      case BIN_LITERAL:
      case OCT_LITERAL:
      case HEX_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_ATOM:
      case STRING_LITERAL:
      case ZERO_APO_REST:
      case IDENTIFIER:
        Atom();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POINTER:
          jj_consume_token(POINTER);
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        Sequence();
        break;
      case VARIABLE:
        Variable();
        jj_consume_token(POINTER);
        Sequence();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtreeCloseNodeScope(jjtn000);
                  }
    }
  }

  final public void Cut() throws ParseException {
 /*@bgen(jjtree) Cut */
 ASTCut jjtn000 = new ASTCut(this, JJTCUT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(CUT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/*
void DividedAtom():
{}
{
    ((LOOKAHEAD(3) SimpleAtom() | Variable())) (BinaryOp() (SimpleAtom() | Variable()))+
}
*/
  final public void Sequence() throws ParseException {
 /*@bgen(jjtree) Sequence */
 ASTSequence jjtn000 = new ASTSequence(this, JJTSEQUENCE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(LPAREN);
      BodyElement();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        BodyElement();
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void List() throws ParseException {
 /*@bgen(jjtree) List */
  ASTList jjtn000 = new ASTList(this, JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      if (jj_2_7(2)) {
        token = jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          token = jj_consume_token(LBRACKET);
          BodyElement();
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[24] = jj_gen;
              break label_5;
            }
            jj_consume_token(COMMA);
            BodyElement();
          }
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LISTSEP:
              ;
              break;
            default:
              jj_la1[25] = jj_gen;
              break label_6;
            }
            jj_consume_token(LISTSEP);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VARIABLE:
              Variable();
              break;
            case LBRACKET:
              List();
              break;
            default:
              jj_la1[26] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          jj_consume_token(RBRACKET);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void Braces() throws ParseException {
 /*@bgen(jjtree) Braces */
     ASTBraces jjtn000 = new ASTBraces(this, JJTBRACES);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(LBRACE);
      BodyElement();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
        case COMMA:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        BodyElement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void Parenthesis() throws ParseException {
 /*@bgen(jjtree) Parenthesis */
  ASTParenthesis jjtn000 = new ASTParenthesis(this, JJTPARENTHESIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(LPAREN);
      BodyElement();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
        case COMMA:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        BodyElement();
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void Atom() throws ParseException {
  Token token;
    if (jj_2_8(2)) {
      Functor();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case DECIMAL_LITERAL:
      case BIN_LITERAL:
      case OCT_LITERAL:
      case HEX_LITERAL:
        IntAtom();
        break;
      case FLOATING_POINT_LITERAL:
        FloatAtom();
        break;
      case STRING_LITERAL:
        StringAtom();
        break;
      case ASSIGN:
      case METAASSIGN:
      case GT:
      case LT:
      case ARROW:
      case IF:
      case SOFTCUT:
      case COLON:
      case EQ:
      case EQ2:
      case EQ3:
      case EQ4:
      case NEQ:
      case NEQ2:
      case IS:
      case LE:
      case LE2:
      case GE:
      case GE2:
      case NE:
      case PLUS:
      case STAR:
      case MOD:
      case LSHIFT:
      case RSIGNEDSHIFT:
      case SLASH:
      case DIVISION:
      case BITAND:
      case BITOR:
      case BITNOT:
      case BITXOR:
        BinaryOp();
        break;
      case CLAUSEDEF:
      case DOLLAR:
      case ZERO_APO_REST:
        RestTokens();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
void SimpleAtom() #void :
{ Token token; }
{
    ( 
      Identifier()
    | LOOKAHEAD(1) IntAtom()
    | FloatAtom()
    )
}
*/
  final public void RestTokens() throws ParseException {
 /*@bgen(jjtree) RestTokens */
  ASTRestTokens jjtn000 = new ASTRestTokens(this, JJTRESTTOKENS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLAUSEDEF:
        //      token=<SEMICOLON>
        //    | token=<COMMA>
             token = jj_consume_token(CLAUSEDEF);
        break;
      case DOLLAR:
        token = jj_consume_token(DOLLAR);
        break;
      case ZERO_APO_REST:
        token = jj_consume_token(ZERO_APO_REST);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.setName(token.image.toString());
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void IntAtom() throws ParseException {
 /*@bgen(jjtree) IntAtom */
  ASTIntAtom jjtn000 = new ASTIntAtom(this, JJTINTATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DECIMAL_LITERAL:
          token = jj_consume_token(DECIMAL_LITERAL);
          break;
        case BIN_LITERAL:
          token = jj_consume_token(BIN_LITERAL);
          break;
        case OCT_LITERAL:
          token = jj_consume_token(OCT_LITERAL);
          break;
        case HEX_LITERAL:
          token = jj_consume_token(HEX_LITERAL);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtreeCloseNodeScope(jjtn000);
       jjtn000.setName("-"+token.image.toString());
        break;
      case DECIMAL_LITERAL:
      case BIN_LITERAL:
      case OCT_LITERAL:
      case HEX_LITERAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DECIMAL_LITERAL:
          token = jj_consume_token(DECIMAL_LITERAL);
          break;
        case BIN_LITERAL:
          token = jj_consume_token(BIN_LITERAL);
          break;
        case OCT_LITERAL:
          token = jj_consume_token(OCT_LITERAL);
          break;
        case HEX_LITERAL:
          token = jj_consume_token(HEX_LITERAL);
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtreeCloseNodeScope(jjtn000);
        jjtn000.setName(token.image.toString());
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void FloatAtom() throws ParseException {
 /*@bgen(jjtree) FloatAtom */
  ASTFloatAtom jjtn000 = new ASTFloatAtom(this, JJTFLOATATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(FLOATING_POINT_LITERAL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.setName(token.image.toString());
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void StringAtom() throws ParseException {
 /*@bgen(jjtree) StringAtom */
  ASTStringAtom jjtn000 = new ASTStringAtom(this, JJTSTRINGATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(STRING_LITERAL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.setName(token.image.toString());
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void CharAtom() throws ParseException {
 /*@bgen(jjtree) CharAtom */
  ASTCharAtom jjtn000 = new ASTCharAtom(this, JJTCHARATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      token = jj_consume_token(CHARACTER_ATOM);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
      jjtn000.setName(token.image.toString());
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void Body() throws ParseException {
 /*@bgen(jjtree) Body */
 ASTBody jjtn000 = new ASTBody(this, JJTBODY);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      BodyElement();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
        case COMMA:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_9;
        }
        Separator();
        BodyElement();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void Separator() throws ParseException {
 /*@bgen(jjtree) Separator */
 ASTSeparator jjtn000 = new ASTSeparator(this, JJTSEPARATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        token = jj_consume_token(COMMA);
        break;
      case SEMICOLON:
        token = jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
         jjtn000.setName(token.image.toString());
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void BodyElement() throws ParseException {
 Token token;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOTPROVABLE:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_10;
      }
      jj_consume_token(NOTPROVABLE);
    }
    if (jj_2_9(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        token = jj_consume_token(MINUS);
        break;
      case PLUS:
        token = jj_consume_token(PLUS);
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DYNAMIC:
      case MULTIFILE:
      case MODULE_TRANSPARENT:
      case VOLATILE:
      case ASSIGN:
      case METAASSIGN:
      case GT:
      case LT:
      case CUT:
      case ARROW:
      case IF:
      case SOFTCUT:
      case CLAUSEDEF:
      case COLON:
      case EQ:
      case EQ2:
      case EQ3:
      case EQ4:
      case NEQ:
      case NEQ2:
      case IS:
      case LE:
      case LE2:
      case GE:
      case GE2:
      case NE:
      case PLUS:
      case MINUS:
      case STAR:
      case MOD:
      case LSHIFT:
      case RSIGNEDSHIFT:
      case DOLLAR:
      case SLASH:
      case POINTER:
      case AT:
      case DIVISION:
      case BITAND:
      case BITOR:
      case BITNOT:
      case BITXOR:
      case DECIMAL_LITERAL:
      case BIN_LITERAL:
      case OCT_LITERAL:
      case HEX_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_ATOM:
      case STRING_LITERAL:
      case ZERO_APO_REST:
      case VARIABLE:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
        TermWithoutOp();
        break;
      default:
        jj_la1[41] = jj_gen;

      }
                 jjtree.peekNode().setFlag(token);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DYNAMIC:
      case MULTIFILE:
      case MODULE_TRANSPARENT:
      case VOLATILE:
      case ASSIGN:
      case METAASSIGN:
      case GT:
      case LT:
      case CUT:
      case ARROW:
      case IF:
      case SOFTCUT:
      case CLAUSEDEF:
      case COLON:
      case EQ:
      case EQ2:
      case EQ3:
      case EQ4:
      case NEQ:
      case NEQ2:
      case IS:
      case LE:
      case LE2:
      case GE:
      case GE2:
      case NE:
      case PLUS:
      case MINUS:
      case STAR:
      case MOD:
      case LSHIFT:
      case RSIGNEDSHIFT:
      case DOLLAR:
      case SLASH:
      case POINTER:
      case AT:
      case DIVISION:
      case BITAND:
      case BITOR:
      case BITNOT:
      case BITXOR:
      case DECIMAL_LITERAL:
      case BIN_LITERAL:
      case OCT_LITERAL:
      case HEX_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_ATOM:
      case STRING_LITERAL:
      case ZERO_APO_REST:
      case VARIABLE:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
        Term();
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case METAASSIGN:
      case GT:
      case LT:
      case ARROW:
      case IF:
      case SOFTCUT:
      case COLON:
      case EQ:
      case EQ2:
      case EQ3:
      case EQ4:
      case NEQ:
      case NEQ2:
      case IS:
      case LE:
      case LE2:
      case GE:
      case GE2:
      case NE:
      case PLUS:
      case MINUS:
      case STAR:
      case MOD:
      case LSHIFT:
      case RSIGNEDSHIFT:
      case SLASH:
      case DIVISION:
      case BITAND:
      case BITOR:
      case BITNOT:
      case BITXOR:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_11;
      }
      BinaryOp();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTPROVABLE:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_12;
        }
        jj_consume_token(NOTPROVABLE);
      }
      Term();
    }
  }

  final public void BinaryOp() throws ParseException {
 /*@bgen(jjtree) BinaryOp */
 ASTBinaryOp jjtn000 = new ASTBinaryOp(this, JJTBINARYOP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token token;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARROW:
        token = jj_consume_token(ARROW);
        break;
      case ASSIGN:
        token = jj_consume_token(ASSIGN);
        break;
      case METAASSIGN:
        token = jj_consume_token(METAASSIGN);
        break;
      case GT:
        token = jj_consume_token(GT);
        break;
      case LT:
        token = jj_consume_token(LT);
        break;
      case EQ:
        token = jj_consume_token(EQ);
        break;
      case EQ2:
        token = jj_consume_token(EQ2);
        break;
      case EQ3:
        token = jj_consume_token(EQ3);
        break;
      case EQ4:
        token = jj_consume_token(EQ4);
        break;
      case NEQ:
        token = jj_consume_token(NEQ);
        break;
      case NEQ2:
        token = jj_consume_token(NEQ2);
        break;
      case IS:
        token = jj_consume_token(IS);
        break;
      case LE:
        token = jj_consume_token(LE);
        break;
      case GE:
        token = jj_consume_token(GE);
        break;
      case LE2:
        token = jj_consume_token(LE2);
        break;
      case GE2:
        token = jj_consume_token(GE2);
        break;
      case COLON:
        token = jj_consume_token(COLON);
        break;
      case NE:
        token = jj_consume_token(NE);
        break;
      case PLUS:
        token = jj_consume_token(PLUS);
        break;
      case MINUS:
        token = jj_consume_token(MINUS);
        break;
      case STAR:
        token = jj_consume_token(STAR);
        break;
      case LSHIFT:
        token = jj_consume_token(LSHIFT);
        break;
      case RSIGNEDSHIFT:
        token = jj_consume_token(RSIGNEDSHIFT);
        break;
      case IF:
        token = jj_consume_token(IF);
        break;
      case MOD:
        token = jj_consume_token(MOD);
        break;
      case SOFTCUT:
        token = jj_consume_token(SOFTCUT);
        break;
      case SLASH:
        token = jj_consume_token(SLASH);
        break;
      case BITAND:
        token = jj_consume_token(BITAND);
        break;
      case DIVISION:
        token = jj_consume_token(DIVISION);
        break;
      case BITOR:
        token = jj_consume_token(BITOR);
        break;
      case BITNOT:
        token = jj_consume_token(BITNOT);
        break;
      case BITXOR:
        token = jj_consume_token(BITXOR);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  jjtreeCloseNodeScope(jjtn000);

    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtreeCloseNodeScope(jjtn000);
  }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(POINTER)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(MODULE_TRANSPARENT)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(MULTIFILE)) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(DYNAMIC)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(41)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(MINUS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(CHARACTER_ATOM)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(MODULE_TRANSPARENT)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(MULTIFILE)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(DYNAMIC)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(CHARACTER_ATOM)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(POINTER)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_30()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(CUT)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(AT)) return true;
    return false;
  }

  public PrologParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[46];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1806c00,0x1806c00,0x6c00,0x6c00,0x6c00,0x1800000,0x6c00,0x0,0x1800000,0x1000,0xfe77ec00,0x6c00,0x1100000,0x1100000,0x1100000,0x1100000,0x6c00,0x0,0x0,0xff7fec00,0x1086c00,0x0,0xff77ec00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff778000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff7fec00,0xff7fec00,0xfe778000,0x0,0xfe778000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x10000000,0x10000000,0x10018000,0x10000401,0x10000000,0x0,0x0,0x0,0x0,0x0,0x103fddff,0x10018000,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0xf7fe7dff,0xf7c02080,0x8000,0xf7fffdff,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x67fe7dff,0x40002000,0x3c00000,0x3c00000,0x3c00080,0x0,0x0,0x200,0xc0,0xf7fffdff,0xf7fffdff,0x3e5dff,0x200,0x3e5dff,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x21,0x21,0x1,0x1,0x1,0x0,0x0,0x1000,0x0,0x0,0x1,0x21,0x0,0x0,0x0,0x0,0x21,0x20,0x1000,0x2a1,0x2a1,0x0,0x1,0x1000,0x1000,0x4000,0x200,0x200,0x1800,0x1800,0x1800,0x1800,0x0,0x0,0x0,0x0,0x0,0x1800,0x1800,0x0,0x0,0x2a1,0x2a1,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public PrologParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PrologParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PrologParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PrologParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PrologParser(PrologParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PrologParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[79];
    for (int i = 0; i < 79; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 46; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 79; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
