/* Generated By:JJTree&JavaCC: Do not edit this line. PrologParserTokenManager.java */
package org.cs3.pl.parser;

public class PrologParserTokenManager implements PrologParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200000000000L) != 0L)
            return 54;
         if ((active0 & 0x20040100007c00L) != 0L)
         {
            jjmatchedKind = 64;
            return 54;
         }
         return -1;
      case 1:
         if ((active0 & 0x100000000L) != 0L)
            return 54;
         if ((active0 & 0x20040000007c00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 64;
               jjmatchedPos = 1;
            }
            return 54;
         }
         return -1;
      case 2:
         if ((active0 & 0x5c00L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 64;
               jjmatchedPos = 2;
            }
            return 54;
         }
         if ((active0 & 0x20040000002000L) != 0L)
            return 54;
         return -1;
      case 3:
         if ((active0 & 0x7c00L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 3;
            return 54;
         }
         return -1;
      case 4:
         if ((active0 & 0x7c00L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 4;
            return 54;
         }
         return -1;
      case 5:
         if ((active0 & 0x7c00L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 5;
            return 54;
         }
         return -1;
      case 6:
         if ((active0 & 0x400L) != 0L)
            return 54;
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 6;
            return 55;
         }
         if ((active0 & 0x5800L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 6;
            return 54;
         }
         return -1;
      case 7:
         if ((active0 & 0x4000L) != 0L)
            return 54;
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 7;
            return 55;
         }
         if ((active0 & 0x1800L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 7;
            return 54;
         }
         return -1;
      case 8:
         if ((active0 & 0x800L) != 0L)
            return 54;
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 8;
            return 54;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 8;
            return 55;
         }
         return -1;
      case 9:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 9;
            return 55;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 9;
            return 54;
         }
         return -1;
      case 10:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 10;
            return 54;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 10;
            return 55;
         }
         return -1;
      case 11:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 11;
            return 55;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 11;
            return 54;
         }
         return -1;
      case 12:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 12;
            return 54;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 12;
            return 55;
         }
         return -1;
      case 13:
         if ((active0 & 0x1000L) != 0L)
            return 54;
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 13;
            return 55;
         }
         return -1;
      case 14:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 14;
            return 55;
         }
         return -1;
      case 15:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 15;
            return 55;
         }
         return -1;
      case 16:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 16;
            return 55;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 36:
         return jjStartNfaWithStates_0(0, 45, 54);
      case 40:
         return jjStopAtPos(0, 69);
      case 41:
         return jjStopAtPos(0, 70);
      case 42:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 43:
         return jjStopAtPos(0, 38);
      case 44:
         return jjStopAtPos(0, 76);
      case 45:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x300000L);
      case 46:
         return jjStopAtPos(0, 77);
      case 47:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x6000000000040L);
      case 58:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 59:
         return jjStopAtPos(0, 75);
      case 60:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x80200000000L);
      case 61:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x143c010000L);
      case 62:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x100800000000L);
      case 63:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 64:
         return jjStopAtPos(0, 48);
      case 91:
         return jjStopAtPos(0, 73);
      case 92:
         return jjMoveStringLiteralDfa1_0(0x180200c0000000L);
      case 93:
         return jjStopAtPos(0, 74);
      case 94:
         return jjStopAtPos(0, 47);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100001000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x40000002800L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 123:
         return jjStopAtPos(0, 71);
      case 124:
         return jjStopAtPos(0, 78);
      case 125:
         return jjStopAtPos(0, 72);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 43:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 45:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         return jjMoveStringLiteralDfa2_0(active0, 0x500000L);
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 47:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L);
      case 58:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 60:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         break;
      case 61:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 62:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 64:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 92:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x20040000006000L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 54);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(2, 16);
         break;
      case 47:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 51);
         break;
      case 61:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 29);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 31);
         break;
      case 62:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(2, 20);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(2, 22);
         break;
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4800L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4400L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4400L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 99:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 54);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x5000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 14, 54);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 11, 54);
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x3000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(13, 12, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(17, 13, 55);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 54;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAddTwoStates(29, 30);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAddStates(3, 12);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAddTwoStates(29, 30);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(13, 16);
                  else if (curChar == 39)
                     jjCheckNAddStates(17, 20);
                  else if (curChar == 37)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddStates(21, 23);
                  }
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 54:
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddTwoStates(29, 30);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(21, 23);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 3:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
               case 9:
                  if (curChar == 39)
                     jjCheckNAddStates(17, 20);
                  break;
               case 6:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  break;
               case 8:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  break;
               case 10:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 39 && kind > 60)
                     kind = 60;
                  break;
               case 12:
               case 16:
                  if (curChar == 34)
                     jjCheckNAddStates(13, 16);
                  break;
               case 13:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 15:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 17:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 34 && kind > 61)
                     kind = 61;
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 28);
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 21:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 23:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0xffffff7fffffffffL & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 25:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 28:
                  if (curChar != 36)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddTwoStates(29, 30);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddStates(0, 2);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAddStates(3, 12);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(33);
                  break;
               case 35:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar == 46)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAddTwoStates(42, 43);
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(45);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 55:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAddTwoStates(29, 30);
                  }
                  if ((0x87fffffeL & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 0:
                  if ((0x87fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(27);
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAddTwoStates(29, 30);
                  }
                  break;
               case 54:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAddTwoStates(29, 30);
                  }
                  if ((0x87fffffeL & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  jjAddStates(21, 23);
                  break;
               case 6:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  break;
               case 7:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 14:
                  if (curChar == 92)
                     jjAddStates(29, 31);
                  break;
               case 15:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 24:
                  if (kind > 62)
                     kind = 62;
                  break;
               case 26:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddTwoStates(29, 30);
                  break;
               case 29:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddStates(0, 2);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAddStates(0, 2);
                  break;
               case 34:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 38:
                  if (curChar == 120)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(39);
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(32, 33);
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(34, 35);
                  break;
               case 51:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjAddStates(21, 23);
                  break;
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(17, 20);
                  break;
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(13, 16);
                  break;
               case 24:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 62)
                     kind = 62;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 54 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_2()
{
   return 1;
}
static final int[] jjnextStates = {
   29, 30, 31, 33, 34, 36, 38, 40, 41, 46, 47, 50, 51, 13, 14, 17, 
   18, 6, 7, 10, 11, 1, 2, 4, 13, 14, 20, 17, 18, 15, 19, 21, 
   44, 45, 48, 49, 52, 53, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, 
"\144\171\156\141\155\151\143", "\155\165\154\164\151\146\151\154\145", 
"\151\156\151\164\151\141\154\151\172\141\164\151\157\156", "\155\157\144\165\154\145\137\164\162\141\156\163\160\141\162\145\156\164", 
"\166\157\154\141\164\151\154\145", "\75", "\75\56\56", "\76", "\74", "\41", "\55\55\76", "\55\76", "\52\55\76", 
"\77\55", "\72\55", "\72", "\75\75", "\75\72\75", "\75\134\75", "\75\100\75", "\134\75", 
"\134\75\75", "\151\163", "\74\75", "\75\74", "\76\75", "\75\76", "\41\75", "\53", "\55", 
"\52", "\134\53", "\155\157\144", "\74\74", "\76\76", "\44", "\57", "\136", "\100", 
"\57\57", "\57\134", "\134\57\57", "\134\57", "\170\157\162", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\50", "\51", 
"\173", "\175", "\133", "\135", "\73", "\54", "\56", "\174", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_MULTI_LINE_COMMENT", 
   "IN_SINGLE_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xf7fffffffffffc01L, 0x7fe1L, 
};
static final long[] jjtoSkip = {
   0x1beL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x180L, 0x0L, 
};
static final long[] jjtoMore = {
   0x240L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[54];
private final int[] jjstateSet = new int[108];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public PrologParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public PrologParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 54; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.beginOffset=input_stream.getBeginOffset();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   t.endOffset= input_stream.getEndOffset();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
}
